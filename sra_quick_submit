#!/usr/bin/env python

import datetime
import csv
import tarfile
import os
from os.path import *
import xml.etree.ElementTree as xml

usage = r"""
	SRA Quick Submit
	Aug 16, Justin Payne 
(ORISE FDA-CFSAN-ORS-DM-MMSB, justin.payne@fda.hhs.gov)
	v1.2b
	
Import a table file of metadata and generate submittable XML tarballs that can be
uploaded to NCBI SRA. Accepts any line ending (Mac, PC, Linux).

usage: sra_quick_submit [options] <metadata.txt> [options]

options:
		
-p <BioProject ID> specify NCBI BioProject ID (default: PRJNA212117, for Lee Katz's CDC lab)
-o <path>		specify output directory (default: current directory)
-d <',' or 'comma', '\t' or 'tab'>	specify delimiting character (default: tab)
-m 			Don't produce submissions; instead, write to the output directory a
			tab-delimited template table that will work with this script.
-h			Hold submission until this date (YYYY-MM-DD format.)

Change history:
Aug 29 v1.1b: protection from sample name collision. 
Sept 6 v1.2b: -p flag for specifying BioProject ID.
"""

project = 'PRJNA212117'

experiment = """
<EXPERIMENT alias="{Sample Name}" xmlns="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<TITLE>Whole genome shotgun sequencing of {organism} by Illumina MiSeq</TITLE>
	<STUDY_REF accession="{project}" />
	<DESIGN>
      <DESIGN_DESCRIPTION>MiSeq deep shotgun sequencing of cultured isolate.</DESIGN_DESCRIPTION>
      <SAMPLE_DESCRIPTOR accession="{Biosample Accession}" />
      <LIBRARY_DESCRIPTOR>
        <LIBRARY_NAME>{organism} Nextera XT shotgun library</LIBRARY_NAME>
        <LIBRARY_STRATEGY>WGS</LIBRARY_STRATEGY>
        <LIBRARY_SOURCE>GENOMIC</LIBRARY_SOURCE>
        <LIBRARY_SELECTION>RANDOM</LIBRARY_SELECTION>
        <LIBRARY_LAYOUT>
          <PAIRED NOMINAL_LENGTH="500" />
        </LIBRARY_LAYOUT>
        <LIBRARY_CONSTRUCTION_PROTOCOL>Illumina Nextera XT library created for {organism}.</LIBRARY_CONSTRUCTION_PROTOCOL>
      </LIBRARY_DESCRIPTOR>
      <SPOT_DESCRIPTOR>
              <SPOT_DECODE_SPEC>
                <SPOT_LENGTH>502</SPOT_LENGTH>
                <READ_SPEC>
                  <READ_INDEX>0</READ_INDEX>
                  <READ_CLASS>Application Read</READ_CLASS>
                  <READ_TYPE>Forward</READ_TYPE>
                  <BASE_COORD>1</BASE_COORD>
                </READ_SPEC>
                <READ_SPEC>
                  <READ_INDEX>1</READ_INDEX>
                  <READ_CLASS>Application Read</READ_CLASS>
                  <READ_TYPE>Reverse</READ_TYPE>
                  <BASE_COORD>251</BASE_COORD>
                </READ_SPEC>
              </SPOT_DECODE_SPEC>
      </SPOT_DESCRIPTOR>
    </DESIGN>
	<PLATFORM>
		<ILLUMINA>
			<INSTRUMENT_MODEL>Illumina MiSeq</INSTRUMENT_MODEL>
		</ILLUMINA>
	</PLATFORM>
	<PROCESSING>
		<PIPELINE>
			<PIPE_SECTION section_name="base caller">
				<STEP_INDEX>0</STEP_INDEX>
			   	<PREV_STEP_INDEX>NULL</PREV_STEP_INDEX>
			   	<PROGRAM>RTA</PROGRAM>
			   	<VERSION>1.17.28</VERSION>
			</PIPE_SECTION>
		</PIPELINE>
	</PROCESSING>
</EXPERIMENT>
"""

run = """
<RUN alias="{Sample Name}">
 <EXPERIMENT_REF refname="{Sample Name}" />
 <DATA_BLOCK>
  <FILES>
  	<FILE checksum_method="MD5" filetype="fastq" checksum="{file1_checksum}" filename="{file1_name}" />
  	<FILE checksum_method="MD5" filetype="fastq" checksum="{file2_checksum}" filename="{file2_name}" />
  </FILES>
 </DATA_BLOCK>
</RUN>
"""

submission = """
<SUBMISSION alias="{Sample Name}{num}" submission_comment="GenomeTrakr pathogen sampling project">	
	<CONTACTS>
		<CONTACT inform_on_error="mailto:gzu2@cdc.gov" inform_on_status="mailto:gzu2@cdc.gov" name="CLC/EDLB:Lee Katz" />
	</CONTACTS>
	<ACTIONS>
	<ACTION><ADD schema="experiment" source="{Sample Name}{num}.experiment.xml" /></ACTION>
	<ACTION><ADD schema="run" source="{Sample Name}{num}.run.xml" /></ACTION>
	<ACTION><HOLD HoldUntilDate="{date}Z" /></ACTION></ACTIONS>
</SUBMISSION>
"""

sample_names = list()

def make_submission(path, entry, date=datetime.datetime.today().strftime("%Y-%m-%d")):
	"Produce three submission files - run, experiment, submission - and then tar them up."
	print "Producing run, experiment, and submission file for sample {Sample Name}...".format(**entry)
	
	if entry['Sample Name'] in sample_names:
		entry['num'] = ".{:02}".format(sample_names.count(entry['Sample Name']) + 1)
	else:
		entry['num'] = ''
	
	
	exp = xml.fromstring(experiment.format(project=project, **entry))
	xml.ElementTree(exp).write(join(path, '{Sample Name}{num}.experiment.xml'.format(**entry)), encoding="UTF-8", xml_declaration=True)
	
	r = xml.fromstring(run.format(**entry))
	xml.ElementTree(r).write(join(path, '{Sample Name}{num}.run.xml'.format(**entry)), encoding="UTF-8", xml_declaration=True)
	
	sub = xml.fromstring(submission.format(date=date, **entry))
	xml.ElementTree(sub).write(join(path, '{Sample Name}{num}.submission.xml'.format(**entry)), encoding="UTF-8", xml_declaration=True)
	
	tarball = tarfile.open(join(path, '{Sample Name}{num}.submission_archive.tar'.format(**entry)), 'w', format=tarfile.GNU_FORMAT)
	tarball.add(join(path, '{Sample Name}{num}.experiment.xml'.format(**entry)), arcname='{Sample Name}{num}.experiment.xml'.format(**entry))
	tarball.add(join(path, '{Sample Name}{num}.run.xml'.format(**entry)), arcname='{Sample Name}{num}.run.xml'.format(**entry))
	tarball.add(join(path, '{Sample Name}{num}.submission.xml'.format(**entry)), arcname='{Sample Name}{num}.submission.xml'.format(**entry))
	tarball.close()
	sample_names.append(entry['Sample Name'])
	
	
if __name__ == "__main__":
	#Collect flags, parse parameters, then load the metadata file and make submissions
	import sys
	path = os.getcwd()
	delimiter = '\t'
	date = None
	if '-p' in sys.argv:
		project = sys.argv.pop(sys.argv.index('-p') + 1)
		sys.argv.remove('-p')
	else:
		print "No BioProject ID specified, using {}".format(project)
	if '-o' in sys.argv:
		path = normpath(sys.argv.pop(sys.argv.index('-o') + 1))
		sys.argv.remove('-o')
	if '-h' in sys.argv:
		date = sys.argv.pop(sys.argv.index('-h') + 1)
		sys.argv.remove('-h')
		print "Submitting with HOLD date: {}".format(date)

	if '-m' in sys.argv:
		with open(join(path, 'SRA_Quick_Submit_template.txt'), 'w') as template_file:
			for h in ('Sample Name',
					  'organism',
					  'strain',
					  'Biosample Accession',
					  'file1_name',
					  'file1_checksum',
					  'file2_name',
					  'file2_checksum'):
				template_file.write("{}\t".format(h))
			template_file.write("\n")
			print "Wrote {}/SRA_Quick_Submit_template.txt".format(path)
			quit()
	if '-d' in sys.argv:
		delimiter_command = sys.argv.pop(sys.argv.index('-d') + 1)
		if 'tab' in delimiter_command:
			delimiter = '\t'
		if 'comma' in delimiter_command:
			delimiter = ','
		else:
			delimiter = delimiter_command
	if not date:
		date = datetime.datetime.today().strftime("%Y-%m-%d")
		print "No HOLD date specified, using default: {}".format(date)
	try:
		with open(sys.argv[1], 'rU') as input_file:
			entries = csv.DictReader(input_file, dialect='excel', delimiter=delimiter)
			for entry in entries:
				make_submission(path, entry, date)
	except IndexError:
		print "No metadata file specified."
		print usage
		quit()
	except IOError:
		print "{} not found. Check file location and try again.".format(sys.argv[1])
		quit()
		
	
	

